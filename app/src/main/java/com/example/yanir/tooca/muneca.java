package com.example.yanir.tooca;        import android.content.ClipData;        import android.content.ClipDescription;        import android.content.Context;        import android.os.Bundle;        import android.support.v7.app.ActionBarActivity;        import android.support.v7.widget.Toolbar;        import android.util.Log;        import android.view.DragEvent;        import android.view.Gravity;        import android.view.Menu;        import android.view.MenuInflater;        import android.view.MenuItem;        import android.view.MotionEvent;        import android.view.View;        import android.view.View.OnDragListener;        import android.view.ViewGroup;        import android.widget.Button;        import android.widget.ImageView;        import android.widget.LinearLayout;        import android.widget.Toast;        import java.lang.reflect.Field;        import java.util.ArrayList;public class muneca extends ActionBarActivity implements OnDragListener, View.OnClickListener,View.OnTouchListener {    private int[] tiposDePeluca = {R.drawable.ic_peluca1,R.drawable.ic_peluca2 ,R.drawable.ic_peluca3,R.drawable.ic_peluca41,R.drawable.ic_peluca4, R.drawable.ic_peluca5 ,R.drawable.ic_peluca6, R.drawable.ic_peluca7,R.drawable.ic_peluca8,R.drawable.ic_peluca9,R.drawable.ic_peluca10,R.drawable.ic_peluca11 ,R.drawable.ic_peluca12n};    private int[] tiposDeFranela = {R.drawable.ic_croptop1,R.drawable.ic_croptop2,R.drawable.ic_croptop3,R.drawable.ic_croptop4, R.drawable.ic_franela1,R.drawable.ic_franela2,R.drawable.ic_franela3};    private int[] tiposDePantalon = {R.drawable.ic_jean1volteado,R.drawable.ic_short1newpicontapado,R.drawable.ic_jean1,R.drawable.ic_jean2,R.drawable.ic_short2};    private int[] tiposDeZapato = {R.drawable.ic_botitas1completo3,R.drawable.ic_ic_botitas1completo3,R.drawable.ic_ic_botitas2,R.drawable.ic_ic_botitas3,R.drawable.ic_zapatos1,R.drawable.ic_zapatos2,R.drawable.ic_transparente};    private int[] tiposDeVestido = {R.drawable.ic_vestido5masrodado,R.drawable.ic_vestidoazul1masradodo,R.drawable.ic_vestidorosamasrodaado};    Manejador_BD BD;    private static final String TAG = "junk";    //ImageView para hacer el OnSwipe    private ImageView im_cabello;    private ImageView im_camisa;    private ImageView im_pantalon;    private ImageView im_zapatos;    private ImageView im_vestido;    //ImageView que seran casteados a LinearLayout para escuchar los OnDrag    private View ll_vestido;    private ImageView iv_cabello;    private ImageView iv_camisa;    private ImageView iv_pantalon;    private ImageView iv_zapato;    private LinearLayout ll_muneca;    private LinearLayout HorizontalScrollImagenes;    private Button botonCamisa;    private Button botonPelucas;    private Button botonPantalones;    private Button botonZapatos;    private Button botonVestido;    private Button botonPiel;    private ImageView[] cabello;    private ArrayList<Accesorios> cabellos;    private ArrayList<Accesorios>franelas;    private ArrayList<Accesorios>pantalones;    private ArrayList<Accesorios>zapatos;    private ArrayList<Accesorios>vestido;    private ScreenCapture captura;    private Button botonCaptura;    private Button botonColorPielBlanca;    private Button botonColorPielMorena;    private Button botonColorPielNegra;    private int cabello_id;    private int camisa_id;    private int pantalon_id;    private int zapatos_id;    private int vestido_id;    private int piel_id;    ///////////////////////////////INICIO ONCREATE    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_muneca);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        BD = new Manejador_BD(this);        ArrayList<Integer> accesorios_BD = new ArrayList<Integer>();        accesorios_BD = BD.extraerMuneca();        cabello_id = accesorios_BD.get(0);        camisa_id = accesorios_BD.get(1);        pantalon_id = accesorios_BD.get(2);        zapatos_id = accesorios_BD.get(3);        if(accesorios_BD.get(4)==0){        }        System.out.println("EXTRAIDO cabello:"+cabello_id+"camisa:"+camisa_id+"pantalon:"+pantalon_id+"zapatos:"+zapatos_id+"vestido:"+vestido_id);        //PARA APLICAR EL ONSWIPE PARA QUITARLE LA ROPA; PENDIENTE EL VESTIDO        im_cabello = (ImageView) findViewById(R.id.iv_cabello);        im_camisa  = (ImageView) findViewById(R.id.iv_camisa);        im_pantalon  = (ImageView) findViewById(R.id.iv_pantalon);        im_zapatos  = (ImageView) findViewById(R.id.iv_zapatos);        im_cabello.setOnTouchListener(new OnSwipeTouchListener(this) {            public void onSwipeTop() {                im_cabello.setImageResource(R.drawable.ic_transparente);                cabello_id = R.drawable.ic_transparente;            }            public void onSwipeRight() {                im_cabello.setImageResource(R.drawable.ic_transparente);                cabello_id = R.drawable.ic_transparente;            }            public void onSwipeLeft() {                im_cabello.setImageResource(R.drawable.ic_transparente);                cabello_id = R.drawable.ic_transparente;            }            public void onSwipeBottom() {                im_cabello.setImageResource(R.drawable.ic_transparente);                cabello_id = R.drawable.ic_transparente;            }            public void onTouchable() {                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<cabellos.size();i++){                    HorizontalScrollImagenes.addView(cabellos.get(i).getAccesorio());                }            }            public boolean onTouch(View v, MotionEvent event) {                return gestureDetector.onTouchEvent(event);            }        });        im_camisa.setOnTouchListener(new OnSwipeTouchListener(this) {            public void onSwipeTop() {                im_camisa.setImageResource(R.drawable.ic_transparente);                camisa_id = R.drawable.ic_transparente;            }            public void onSwipeRight() {                ll_vestido.setBackground(null);                im_camisa.setImageResource(R.drawable.ic_transparente);                camisa_id = R.drawable.ic_transparente;                vestido_id = 0;            }            public void onSwipeLeft() {                ll_vestido.setBackground(null);                im_camisa.setImageResource(R.drawable.ic_transparente);                camisa_id = R.drawable.ic_transparente;                vestido_id = 0;            }            public void onSwipeBottom() {                ll_vestido.setBackground(null);                im_camisa.setImageResource(R.drawable.ic_transparente);                camisa_id = R.drawable.ic_transparente;                vestido_id = 0;            }            public void onTouchable() {                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<franelas.size();i++){                    HorizontalScrollImagenes.addView(franelas.get(i).getAccesorio());                }            }            public boolean onTouch(View v, MotionEvent event) {                return gestureDetector.onTouchEvent(event);            }        });        im_pantalon.setOnTouchListener(new OnSwipeTouchListener(this) {            public void onSwipeTop() {                ll_vestido.setBackground(null);                vestido_id = 0;                im_pantalon.setImageResource(R.drawable.ic_transparente);                pantalon_id = R.drawable.ic_transparente;            }            public void onSwipeRight() {                ll_vestido.setBackground(null);                vestido_id = 0;                im_pantalon.setImageResource(R.drawable.ic_transparente);                pantalon_id = R.drawable.ic_transparente;            }            public void onSwipeLeft() {                ll_vestido.setBackground(null);                vestido_id = 0;                im_pantalon.setImageResource(R.drawable.ic_transparente);                pantalon_id = R.drawable.ic_transparente;            }            public void onSwipeBottom() {                ll_vestido.setBackground(null);                vestido_id = 0;                im_pantalon.setImageResource(R.drawable.ic_transparente);                pantalon_id = R.drawable.ic_transparente;            }            public void onTouchable() {                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<pantalones.size();i++){                    HorizontalScrollImagenes.addView(pantalones.get(i).getAccesorio());                }            }            public boolean onTouch(View v, MotionEvent event) {                return gestureDetector.onTouchEvent(event);            }        });        im_zapatos.setOnTouchListener(new OnSwipeTouchListener(this) {           public void onSwipeTop() {                im_zapatos.setImageResource(R.drawable.ic_transparente);               zapatos_id  =R.drawable.ic_transparente;            }            public void onSwipeRight() {                im_zapatos.setImageResource(R.drawable.ic_transparente);                zapatos_id  =R.drawable.ic_transparente;            }            public void onSwipeLeft() {                im_zapatos.setImageResource(R.drawable.ic_transparente);                zapatos_id  =R.drawable.ic_transparente;            }            public void onSwipeBottom() {                im_zapatos.setImageResource(R.drawable.ic_transparente);                zapatos_id  =R.drawable.ic_transparente;            }            public void onTouchable() {                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<zapatos.size();i++){                    HorizontalScrollImagenes.addView(zapatos.get(i).getAccesorio());                }            }            public boolean onTouch(View v, MotionEvent event) {                return gestureDetector.onTouchEvent(event);            }        });        //FIN PARA APLICAR EL ONSWIPE PARA QUITARLE LA ROPA; PENDIENTE EL VESTIDO        iv_cabello = (ImageView) findViewById(R.id.iv_cabello);        iv_camisa  = (ImageView) findViewById(R.id.iv_camisa);        iv_pantalon = (ImageView) findViewById(R.id.iv_pantalon);        iv_zapato = (ImageView) findViewById(R.id.iv_zapatos);        /* Inicializo imagenes */        iv_cabello.setImageResource(cabello_id);        iv_camisa.setImageResource(camisa_id);        iv_pantalon.setImageResource(pantalon_id);        iv_zapato.setImageResource(zapatos_id);        HorizontalScrollImagenes = (LinearLayout) findViewById(R.id.imagenesHorizontales);        cabellos = new ArrayList<Accesorios>();        inicializarAccesorios(cabellos,tiposDePeluca);        franelas = new ArrayList<Accesorios>();        inicializarAccesorios(franelas,tiposDeFranela);        pantalones = new ArrayList<Accesorios>();        inicializarAccesorios(pantalones,tiposDePantalon);        zapatos = new ArrayList<Accesorios>();        inicializarAccesorios(zapatos,tiposDeZapato);        vestido = new ArrayList<Accesorios>();        inicializarAccesorios(vestido,tiposDeVestido);        //cabello = new ImageView[3];        //inicializarPelucas(cabello);        botonCamisa = (Button)findViewById(R.id.botoncamisa);        botonCamisa.setOnClickListener(this);        botonPelucas = (Button)findViewById(R.id.botoncabello);        botonPelucas.setOnClickListener(this);        botonPantalones = (Button)findViewById(R.id.botonpantalon);        botonPantalones.setOnClickListener(this);        botonZapatos = (Button)findViewById(R.id.botonzapatos);        botonZapatos.setOnClickListener(this);        botonVestido = (Button) findViewById(R.id.botonvestido);        botonVestido.setOnClickListener(this);        botonPiel = (Button) findViewById(R.id.botonpiel);        botonPiel.setOnClickListener(this);        botonColorPielBlanca =new Button(this);        botonColorPielMorena =new Button(this);        botonColorPielNegra =new Button(this);        botonColorPielBlanca.setBackgroundColor(getResources().getColor(R.color.md_muneca_blanca));        botonColorPielMorena.setBackgroundColor(getResources().getColor(R.color.md_muneca_morena));        botonColorPielNegra.setBackgroundColor(getResources().getColor(R.color.md_muneca_negra));        botonColorPielBlanca.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ll_muneca.setBackgroundResource(R.drawable.ic_munequitablanquita);                piel_id = R.drawable.ic_munequitablanquita;            }        });        botonColorPielMorena.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ll_muneca.setBackgroundResource(R.drawable.ic_munequitamorena);                piel_id = R.drawable.ic_munequitamorena;            }        });        botonColorPielNegra.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ll_muneca.setBackgroundResource(R.drawable.ic_munequitanegrita);                piel_id = R.drawable.ic_munequitanegrita;            }        });        botonColorPielBlanca.setId(View.generateViewId());        botonColorPielMorena.setId(View.generateViewId());        botonColorPielNegra.setId(View.generateViewId());//        register drag event listeners for the target layout containers        ll_vestido = (View) findViewById(R.id.ll_vestido);        if(accesorios_BD.get(4)==0){            ll_vestido.setBackground(null);        }else{            ll_vestido.setBackgroundResource(accesorios_BD.get(4));        }        ll_muneca = (LinearLayout) findViewById(R.id.muneca);        if(accesorios_BD.get(5)==0){           ll_muneca.setBackgroundResource(R.drawable.ic_muequitablanquitap);        }else{            ll_muneca.setBackgroundResource(accesorios_BD.get(5));        }        findViewById(R.id.ll_cabello).setOnDragListener(this);        findViewById(R.id.camisa).setOnDragListener(this);        findViewById(R.id.pantalon).setOnDragListener(this);        findViewById(R.id.zapatos).setOnDragListener(this);        captura=new ScreenCapture();    }    /////////////////////////FIN ONCREATE    ////////////////////////ACTION BAR    @Override    public boolean onCreateOptionsMenu (Menu menu){        MenuInflater mif = getMenuInflater();        mif.inflate(R.menu.main_activity_action,menu);        return true;    }    ////////////////////////FIN ACTION BAR    ///////////////////////Botones del Action Bar    @Override    public boolean onOptionsItemSelected (MenuItem item){        super.onOptionsItemSelected(item);        switch (item.getItemId()){            case R.id.captura_icon:                Toast_Personalizado mensajeScreenshot;                mensajeScreenshot = new Toast_Personalizado(this,"Haz realizado un ScreenShot!",Toast.LENGTH_SHORT);                mensajeScreenshot.show();                captura.screemShot(findViewById(R.id.marco));                break;            case R.id.guardar_icon:                Toast_Personalizado mensajeGuardado;                mensajeGuardado = new Toast_Personalizado(this,"La muneca ha sido guardada exitosamente",Toast.LENGTH_SHORT);                mensajeGuardado.show();                System.out.println("GUARDO");                BD.agregarMuneca(cabello_id,camisa_id,pantalon_id,zapatos_id,vestido_id,piel_id);                MainActivity.renderizar();                break;        }        return true;    }/////////////////////Fin de botones del Action Bar////////////////////////////////////////////////// inicio CLASE ACCESORIOS (PELUCA, CAMISA, PANTALON, VESTIDO, ZAPATOS)    /**     * Esta clase define toda las caracteristicas que posee cada vestido.     */    private class Accesorios {        private ImageView accesorio;        private int idRecurso;        private int idView;        //GETTERS Y SETTERS        public ImageView getAccesorio(){            return accesorio;        }        public int getRecurso(){            return idRecurso;        }        public void setIdView(int idView) {            this.idView = idView;        }        public int getIdView() {            return idView;        }        /**         *         * @param vistaAccesorio ImageView donde se encuentra la imagen         * @param id El id del recurso utilizdo (El de la imagen)         * @param id_vista  El id del ImageView         * @param context   El contexto donde se ejecutara el evento de click         */        public Accesorios(ImageView vistaAccesorio,int id,int id_vista,Context context){            this.accesorio = vistaAccesorio;            this.idRecurso = id;            this.accesorio.setImageResource(id);            this.accesorio.setOnTouchListener((View.OnTouchListener) context);            this.accesorio.setId(id_vista);            this.idView=id_vista;            LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);            layoutParams.gravity= Gravity.CENTER;        }    }    /**     *     * @param accesoriosArray     * Se agregan las pelucas dentro del Array     */    private void inicializarAccesorios(ArrayList<Accesorios> accesoriosArray, int[] tiposDeAccesorios){        for(int i=0;i<tiposDeAccesorios.length;i++){            accesoriosArray.add(new Accesorios(new ImageView(this),tiposDeAccesorios[i],View.generateViewId(),this));        }    }    //////////////////////////////////////////////////FIN CLASE ACCESORIOS (PELUCA, CAMISA, PANTALON, VESTIDO, ZAPATOS)    /**     * Determines the Name of a Resource,     * by passing the <code>R.xyz.class</code> and     * the <code>resourceID</code> of the class to it.     * @param aClass : like <code>R.drawable.class</code>     * @param resourceID : like <code>R.drawable.icon</code>     * @throws IllegalArgumentException if field is not found.     * @throws NullPointerException if <code>aClass</code>-Parameter is null.     * <br><br>     * <b>Example-Call:</b><br>     * <code>String resName = getResourceNameFromClassByID(R.drawable.class, R.drawable.icon);</code><br>     * Then <code>resName</code> would be '<b>icon</b>'.*/    public String getResourceNameFromClassByID(Class<?> aClass, int resourceID)            throws IllegalArgumentException{                /* Get all Fields from the class passed. */        Field[] drawableFields = aClass.getFields();                /* Loop through all Fields. */        for(Field f : drawableFields){            try {                                /* All fields within the subclasses of R                                 * are Integers, so we need no type-check here. */                                /* Compare to the resourceID we are searching. */                if (resourceID == f.getInt(null))                    return f.getName(); // Return the name.            } catch (Exception e) {                e.printStackTrace();            }        }                /* Throw Exception if nothing was found*/        throw new IllegalArgumentException();    }    @Override    public boolean onTouch(View imageView, MotionEvent event) {        //   the ball has been touched//            create clip data holding data of the type MIMETYPE_TEXT_PLAIN        ClipData clipData = ClipData.newPlainText("", "");        View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(imageView);            /*start the drag - contains the data to be dragged,            metadata for this data and callback for drawing shadow*/        imageView.startDrag(clipData, shadowBuilder, imageView, 0);//        return true;    }    @Override    public boolean onDrag(View receivingLayoutView, DragEvent dragEvent) {        View draggedImageView = (View) dragEvent.getLocalState();        int i = 0;        // Handles each of the expected events        switch (dragEvent.getAction()) {            case DragEvent.ACTION_DRAG_STARTED:                Log.i(TAG, "drag action started");                // Determines if this View can accept the dragged data                if (dragEvent.getClipDescription()                        .hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {                    Log.i(TAG, "Can accept this data");                    // returns true to indicate that the View can accept the dragged data.                    return true;                } else {                    Log.i(TAG, "Can not accept this data");                }                // Returns false. During the current drag and drop operation, this View will                // not receive events again until ACTION_DRAG_ENDED is sent.                return false;            case DragEvent.ACTION_DRAG_ENTERED:                Log.i(TAG, "drag action entered");//                the drag point has entered the bounding box                return true;            case DragEvent.ACTION_DRAG_LOCATION:                Log.i(TAG, "drag action location");                /*triggered after ACTION_DRAG_ENTERED                stops after ACTION_DRAG_EXITED*/                return true;            case DragEvent.ACTION_DRAG_EXITED:                Log.i(TAG, "drag action exited");//                the drag shadow has left the bounding box                return true;            case DragEvent.ACTION_DROP:                  /* the listener receives this action type when                  drag shadow released over the target view            the action only sent here if ACTION_DRAG_STARTED returned true            return true if successfully handled the drop else false*/                switch (draggedImageView.getId()) {                    default:                        Log.i(TAG, "in default");                        System.out.println("EL ID DEL IMAGE VIEW: "+draggedImageView.getId());                       if((receivingLayoutView.getTag()).toString().equals("ll_cabello"))                        {                            for(i=0; i<cabellos.size();i++){                                if(cabellos.get(i).getIdView() ==draggedImageView.getId() ){                                    iv_cabello.setImageResource(cabellos.get(i).getRecurso());                                    cabello_id = cabellos.get(i).getRecurso();                                    break;                                     }                            }                            if(++i==cabellos.size()) {                                iv_cabello.setImageResource(R.drawable.ic_transparente);                                cabello_id = R.drawable.ic_transparente;                            }                        }                        if((receivingLayoutView.getTag()).toString().equals("camisa"))                        {                            for(i=0; i<franelas.size();i++){                                if(franelas.get(i).getIdView() ==draggedImageView.getId() ){                                    iv_camisa.setImageResource(franelas.get(i).getRecurso());                                    camisa_id = franelas.get(i).getRecurso();                                    ll_vestido.setBackground(null);                                    vestido_id = 0;                                    break;                                }                            }                        }                        if((receivingLayoutView.getTag()).toString().equals("pantalon"))                        {                            for(i=0; i<pantalones.size();i++){                                if(pantalones.get(i).getIdView() ==draggedImageView.getId() ){                                    iv_pantalon.setImageResource(pantalones.get(i).getRecurso());                                    pantalon_id = pantalones.get(i).getRecurso();                                    ll_vestido.setBackground(null);                                    vestido_id = 0;                                break;                                }                            }                        }                        if((receivingLayoutView.getTag()).toString().equals("zapatos"))                        {                            for(i=0; i<zapatos.size();i++){                                if(zapatos.get(i).getIdView() ==draggedImageView.getId() ){                                    iv_zapato.setImageResource(zapatos.get(i).getRecurso());                                    zapatos_id = zapatos.get(i).getRecurso();                                    break;                                }                            }                        }                        if(((receivingLayoutView.getTag()).toString().equals("camisa")) || (((receivingLayoutView.getTag()).toString().equals("pantalon"))))                        {                            for(i=0; i<vestido.size();i++){                                if(vestido.get(i).getIdView() ==draggedImageView.getId() ){                                    ll_vestido.setBackgroundResource(vestido.get(i).getRecurso());                                    vestido_id = vestido.get(i).getRecurso();                                    iv_pantalon.setImageResource(R.drawable.ic_transparente);                                    pantalon_id = R.drawable.ic_transparente;                                    iv_camisa.setImageResource(R.drawable.ic_transparente);                                    camisa_id = R.drawable.ic_transparente;                                    break;                                }                            }                        }                        return false;                }            case DragEvent.ACTION_DRAG_ENDED:                Log.i(TAG, "drag action ended");                Log.i(TAG, "getResult: " + dragEvent.getResult());//                if the drop was not successful, set the ball to visible                if (!dragEvent.getResult()) {                    Log.i(TAG, "setting visible");                    draggedImageView.setVisibility(View.VISIBLE);                }                return true;            // An unknown action type was received.            default:                Log.i(TAG, "Unknown action type received by OnDragListener.");                break;        }        return false;    }    @Override    public void onClick(View v) {        switch(v.getId()){            case R.id.botoncamisa:                System.out.println("TAMANOOOOOOOOOOOOOOO: "+(franelas.size()));                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<franelas.size();i++){                    HorizontalScrollImagenes.addView(franelas.get(i).getAccesorio());                }                break;            case R.id.botoncabello:                System.out.println("TAMANOOOOOOOOOOOOOOO: "+(cabellos.size()));                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<cabellos.size();i++){                    HorizontalScrollImagenes.addView(cabellos.get(i).getAccesorio());                }            break;            case R.id.botonpiel:                HorizontalScrollImagenes.removeAllViews();                HorizontalScrollImagenes.addView(botonColorPielBlanca);                HorizontalScrollImagenes.addView(botonColorPielMorena);                HorizontalScrollImagenes.addView(botonColorPielNegra);                System.out.println("ENTREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE BOTON PIEL");            break;            case R.id.botonpantalon:                System.out.println("TAMANOOOOOOOOOOOOOOO: "+(pantalones.size()));                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<pantalones.size();i++){                    HorizontalScrollImagenes.addView(pantalones.get(i).getAccesorio());                }            break;            case R.id.botonzapatos:                System.out.println("TAMANOOOOOOOOOOOOOOO: "+(zapatos.size()));                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<zapatos.size();i++){                    HorizontalScrollImagenes.addView(zapatos.get(i).getAccesorio());                }            break;            case R.id.botonvestido:                System.out.println("TAMANOOOOOOOOOOOOOOO: "+(vestido.size()));                HorizontalScrollImagenes.removeAllViews();                for(int i=0;i<vestido.size();i++){                    HorizontalScrollImagenes.addView(vestido.get(i).getAccesorio());                }            break;        }    }}